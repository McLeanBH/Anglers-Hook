{"version":3,"sources":["ember-cli-photoswipe.js","ember-cli-photoswipe/components/photo-swipe.js","ember-cli-weather-icons.js","ember-cli-weather-icons/helpers/weather-icon.js","ember-magic-man.js","ember-magic-man/identity-map.js","ember-magic-man/model.js","ember-magic-man/store.js"],"sourcesContent":["define(\"ember-cli-photoswipe\", [\"ember-cli-photoswipe/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-cli-photoswipe/components/photo-swipe', ['exports', 'ember'], function (exports, Em) {\n\n  'use strict';\n\n  /* global PhotoSwipe */\n  /* global PhotoSwipeUI_Default */\n\n  var run = Em['default'].run;\n\n  exports['default'] = Em['default'].Component.extend({\n\n    onInsert: Em['default'].on('didInsertElement', function() {\n\n      this.set('pswpEl', this.$('.pswp')[0]);\n      this.set('pswpTheme', PhotoSwipeUI_Default);\n\n      this._buildOptions();\n\n      // when passing an array of items, we don't need a block\n      if (this.get('items')) {\n        return this._initItemGallery();\n      }\n      return this._calculateItems();\n    }),\n\n    _buildOptions: function(getThumbBoundsFn) {\n       var reqOpts = {\n        history: false\n      };\n\n      if (Em['default'].isPresent(getThumbBoundsFn)) {\n        reqOpts.getThumbBoundsFn = getThumbBoundsFn;\n      }\n\n      var options = Em['default'].merge(reqOpts, this.get('options') || {});\n      this.set('options', options);\n    },\n\n    _initItemGallery: function() {\n      this.set('gallery', new PhotoSwipe(\n        this.get('pswpEl'),\n        this.get('pswpTheme'),\n        this.get('items'),\n        this.get('options')\n      ));\n      this._reInitOnClose();\n    },\n\n    _reInitOnClose: function() {\n      var component = this;\n      this.get('gallery').listen('close', function() {\n        run.next(function() {\n          component._initItemGallery();\n        });\n      });\n    },\n\n    click: function(evt) {\n\n      var aElement = this.$(evt.target).parent();\n      var index    = aElement.index();\n\n      if (Em['default'].isEmpty(this.get('template')) || !aElement.is('a')) { return; }\n\n      evt.preventDefault();\n\n      // setup options, such as index for index\n      this._buildOptions(this._getBounds.bind(this));\n      this.set('options.index', index);\n\n      var pSwipe = new PhotoSwipe(\n        this.get('pswpEl'),\n        this.get('pswpTheme'),\n        this.get('calculatedItems'),\n        this.get('options')\n      );\n      pSwipe.init();\n    },\n\n    _getBounds: function(i) {\n      var img      = this.$('img').get(i),\n          position = this.$(img).position(),\n          width    = this.$(img).width();\n      return {x: position.left, y: position.top, w: width};\n    },\n\n    _calculateItems: function() {\n      var items           = this.$().find('a');\n      var calculatedItems = Em['default'].A(items).map(function(i, item) {\n        return {\n          src:   Em['default'].$(item).attr('href'),\n          w:     Em['default'].$(item).data('width'),\n          h:     Em['default'].$(item).data('height'),\n          msrc:  Em['default'].$(item).children('img').attr('src'),\n          title: Em['default'].$(item).children('img').attr('alt')\n        };\n      });\n      this.set('calculatedItems', calculatedItems);\n    }\n  });\n\n});","define(\"ember-cli-weather-icons\", [\"ember-cli-weather-icons/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-cli-weather-icons/helpers/weather-icon', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.weatherIcon = weatherIcon;\n\n  function weatherIcon(weather) {\n    return new Ember['default'].Handlebars.SafeString('<i class=\"wi wi-' + weather + '\"></i>');\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(weatherIcon);\n\n});","define(\"ember-magic-man\", [\"ember-magic-man/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-magic-man/identity-map', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n    init: function(){\n      this._map = Ember['default'].Object.create();\n    },\n\n    get: function(type, id) {\n      var typeArray = this._getType(type);\n      if(id) {\n      /* SINGLE RECORD */\n        return typeArray.findBy('__jsim_meta_id', id);\n      } else {\n      /* ALL RECORDS */\n        return typeArray;\n      }\n    },\n\n    set: function(type, id, record) {\n      var typeArray = this._getType(type);\n      var cached = typeArray.findBy('__jsim_meta_id', id);\n      if(cached) {\n        cached.setProperties(record);\n        return cached;\n      } else {\n        var v = record instanceof(Ember['default'].Object) ? record : Ember['default'].Object.create(record);\n        Object.defineProperty(v, '__jsim_meta_id', {\n          value: id,\n          configurable: true\n        });\n        typeArray.addObject(v);\n        return v;\n      }\n    },\n\n    remove: function(type, record) {\n      var typeArray = this._getType(type);\n      if(typeof(record) !== \"object\") {\n        // assume it's an id\n        record = typeArray.findBy('__jsim_meta_id', record);\n      }\n      typeArray.removeObject(record);\n    },\n\n    clear: function(type) {\n      var typeArray = this._getType(type);\n      typeArray.splice(0, typeArray.length);\n    },\n\n    _getType: function(type) {\n      var typeArray = this._map.get(type);\n      if(!typeArray){\n        this._map.set(type, Ember['default'].A());\n        typeArray = this._map.get(type);\n      }\n      return typeArray;\n    }\n  });\n\n});","define('ember-magic-man/model', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n    reload: function(){\n      var type = this._typeKey();\n      return this.store.find(type, this.id);\n    },\n\n    destroy: function(){\n      var type = this._typeKey();\n      return this.store.destroy(type, this);\n    },\n\n    save: function(){\n      var type = this._typeKey();\n      return this.store.save(type, this);\n    },\n\n    _typeKey: function() {\n      var typeKey = this.get('typeKey');\n      var moduleName = ((this.constructor._toString || \"\").match(/model:([^:]*):*/) || []).pop();\n      var key = typeKey || moduleName;\n      if(Ember['default'].isEmpty(key)){\n        throw new Ember['default'].Error(\"No typeKey was found for '\" + this + \"'\");\n      }\n      return key;\n    },\n\n    toJSON: function() {\n      return Ember['default'].Object.create(this);\n    }\n  });\n\n});","define('ember-magic-man/store', ['exports', 'ember', 'ember-magic-man/identity-map'], function (exports, Ember, IdentityMap) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n    init: function(){\n      this.records = IdentityMap['default'].create();\n    },\n\n    find: function(type, id){\n      var adapter = this.adapterFor(type);\n      this._adapterHasMethod(adapter, 'find');\n\n      return adapter.find(type, id).then(function(recordData) {\n        var record = this.createRecord(type, recordData);\n        return this.records.set(type, id, record);\n      }.bind(this));\n    },\n\n    findAll: function(type){\n      var adapter = this.adapterFor(type);\n      this._adapterHasMethod(adapter, 'find');\n\n      return adapter.findAll(type).then(function(recordsData) {\n        this.records.clear(type);\n        recordsData.forEach(function(recordData) {\n          var record = this.createRecord(type, recordData);\n          this.records.set(type, record.id, record);\n        }.bind(this));\n\n        return this.records.get(type);\n      }.bind(this));\n    },\n\n    findQuery: function(type, query){\n      var adapter = this.adapterFor(type);\n      this._adapterHasMethod(adapter, 'find');\n\n      return adapter.findQuery(type, query);\n    },\n\n    destroy: function(type, record) {\n      var adapter = this.adapterFor(type);\n      this._adapterHasMethod(adapter, 'find');\n\n      return adapter.destroy(type, record).then(function() {\n        this.records.remove(type, record);\n      }.bind(this));\n    },\n\n    save: function(type, record) {\n      var adapter = this.adapterFor(type);\n      this._adapterHasMethod(adapter, 'find');\n\n      return adapter.save(type, record).then(function(recordData) {\n        var record = this.createRecord(type, recordData);\n        return this.records.set(type, record.id, record);\n      }.bind(this));\n    },\n\n    push: function(type, data) {\n      var factory = this.modelFor(type);\n      var record = data instanceof(factory) ? data : factory.create(data);\n      return this.records.set(type, record.id, record);\n    },\n\n    createRecord: function(type, properties){\n      var factory = this.modelFor(type);\n      return factory.create(properties);\n    },\n\n    adapterFor: function(type) {\n      var adapter = this.container.lookup('adapter:' + type);\n      if (!adapter) {\n        throw new Ember['default'].Error(\"No adapter was found for '\" + type + \"'\");\n      }\n      return adapter;\n    },\n\n    modelFor: function(type) {\n      var factory = this.container.lookupFactory('model:' + type);\n      if (!factory) {\n        throw new Ember['default'].Error(\"No model was found for '\" + type + \"'\");\n      }\n      return factory;\n    },\n\n    _adapterHasMethod: function(adapter, method) {\n      if (!adapter || !adapter[method] || typeof(adapter[method]) !== 'function') {\n        throw new Ember['default'].Error(\"Adapter \" + adapter.toString() + \" has no method '\" + method + \"'\");\n      }\n    }\n  });\n\n});"],"names":[],"mappingspGA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}